import json, random, time
from aiogram import Bot, Dispatcher, executor, types

TOKEN = "8204880484:AAHZKpUgPBl_hJj_ZQ8HaEczn1dg6njuxZo"
ADMIN_USERNAME = "winikson"
DATA_FILE = "data.json"

bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

# === –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π ===
def load_data():
    try:
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except:
        return {"users": {}, "channels": ["@canal1", "@canal2"], "total_users": 0, "start_date": time.strftime("%Y-%m-%d")}

def save_data(data):
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, indent=2, ensure_ascii=False)

data = load_data()

# === –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ ===
async def check_sub(user_id):
    for ch in data["channels"]:
        try:
            member = await bot.get_chat_member(ch, user_id)
            if member.status not in ("member", "administrator", "creator"):
                return False
        except:
            return False
    return True

# === –ú–µ–Ω—é ===
def main_menu():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("üé∞ –ò–≥—Ä–∞—Ç—å", "üë§ –ü—Ä–æ—Ñ–∏–ª—å").add("üí∏ –ï–∂–µ—á–∞—Å–æ–≤—ã–π –±–æ–Ω—É—Å", "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞").add("üõ† –¢–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–∞")
    return kb

def admin_menu():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("üí∞ –í—ã–¥–∞—Ç—å –¥–µ–Ω—å–≥–∏").add("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª", "‚ûñ –£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª").add("‚¨ÖÔ∏è –í –º–µ–Ω—é")
    return kb

# === –ö–æ–º–∞–Ω–¥—ã ===
@dp.message_handler(commands=["start"])
async def start(msg: types.Message):
    user_id = str(msg.from_user.id)

    if user_id not in data["users"]:
        data["users"][user_id] = {
            "name": msg.from_user.username or msg.from_user.first_name,
            "balance": 1000,
            "last_bonus": 0
        }
        data["total_users"] += 1
        save_data(data)

    if not await check_sub(msg.from_user.id):
        chs = "\n".join(data["channels"])
        await msg.answer(f"üì¢ –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª—ã:\n{chs}")
        return

    await msg.answer("üé∞ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Spin Fortuna!", reply_markup=main_menu())

# === –ò–≥—Ä–∞ ===
@dp.message_handler(lambda m: m.text == "üé∞ –ò–≥—Ä–∞—Ç—å")
async def play(msg: types.Message):
    await msg.answer("üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏:")

    @dp.message_handler(lambda m: m.text.isdigit())
    async def bet_handler(bet_msg: types.Message):
        user_id = str(bet_msg.from_user.id)
        bet = int(bet_msg.text)
        user = data["users"][user_id]

        if user["balance"] < bet:
            await bet_msg.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!", reply_markup=main_menu())
            return

        user["balance"] -= bet
        slots = ["üçí", "üçã", "üçá", "üíé", "7Ô∏è‚É£"]
        result = [random.choice(slots) for _ in range(3)]
        win = random.random() < 0.6

        if win:
            prize = bet * 2
            user["balance"] += prize
            text = f"{' '.join(result)}\nüéâ –ü–æ–±–µ–¥–∞! +{prize} Wn"
        else:
            text = f"{' '.join(result)}\nüò¢ –ü—Ä–æ–∏–≥—Ä—ã—à!"

        save_data(data)
        await bet_msg.answer(text, reply_markup=main_menu())

# === –ü—Ä–æ—Ñ–∏–ª—å ===
@dp.message_handler(lambda m: m.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
async def profile(msg: types.Message):
    u = data["users"][str(msg.from_user.id)]
    await msg.answer(f"üë§ –ù–∏–∫: @{u['name']}\nüí∞ –ë–∞–ª–∞–Ω—Å: {u['balance']} Wn", reply_markup=main_menu())

# === –ï–∂–µ—á–∞—Å–æ–≤—ã–π –±–æ–Ω—É—Å ===
@dp.message_handler(lambda m: m.text == "üí∏ –ï–∂–µ—á–∞—Å–æ–≤—ã–π –±–æ–Ω—É—Å")
async def bonus(msg: types.Message):
    user_id = str(msg.from_user.id)
    user = data["users"][user_id]
    now = time.time()

    if now - user["last_bonus"] >= 3600:
        user["balance"] += 500
        user["last_bonus"] = now
        save_data(data)
        await msg.answer("‚úÖ –í—ã –ø–æ–ª—É—á–∏–ª–∏ 500 Wn!", reply_markup=main_menu())
    else:
        remain = int(3600 - (now - user["last_bonus"])) // 60
        await msg.answer(f"‚è≥ –ë–æ–Ω—É—Å –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —á–µ—Ä–µ–∑ {remain} –º–∏–Ω.", reply_markup=main_menu())

# === –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ===
@dp.message_handler(lambda m: m.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def stats(msg: types.Message):
    await msg.answer(
        f"üìÖ –î–∞—Ç–∞ —Å—Ç–∞—Ä—Ç–∞: {data['start_date']}\n"
        f"üëë –í–ª–∞–¥–µ–ª–µ—Ü: @{ADMIN_USERNAME}\n"
        f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {data['total_users']}",
        reply_markup=main_menu()
    )

# === –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞ ===
@dp.message_handler(lambda m: m.text == "üõ† –¢–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–∞")
async def support(msg: types.Message):
    await msg.answer("‚úâÔ∏è –û–ø–∏—à–∏ –ø—Ä–æ–±–ª–µ–º—É –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º:")

    @dp.message_handler(lambda m: True)
    async def send_support(rep: types.Message):
        if rep.from_user.username == ADMIN_USERNAME:
            return
        kb = types.InlineKeyboardMarkup().add(
            types.InlineKeyboardButton("–û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"reply_{rep.from_user.id}")
        )
        await msg.answer("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω—É!")
        await bot.send_message(
            msg.from_user.id,
            f"üÜò –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç @{rep.from_user.username}:\n{rep.text}",
            reply_markup=kb
        )

# === –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å ===
@dp.message_handler(lambda m: m.from_user.username == ADMIN_USERNAME and m.text.lower() == "/admin")
async def admin_panel(msg: types.Message):
    await msg.answer("üîê –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", reply_markup=admin_menu())

@dp.message_handler(lambda m: m.from_user.username == ADMIN_USERNAME and m.text == "üí∞ –í—ã–¥–∞—Ç—å –¥–µ–Ω—å–≥–∏")
async def give_money(msg: types.Message):
    await msg.answer("üí∏ –í–≤–µ–¥–∏ ID –∏ —Å—É–º–º—É —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:")

    @dp.message_handler(lambda m: True)
    async def gm(m2: types.Message):
        try:
            uid, amount = m2.text.split()
            data["users"][uid]["balance"] += int(amount)
            save_data(data)
            await m2.answer("‚úÖ –ì–æ—Ç–æ–≤–æ!", reply_markup=admin_menu())
        except:
            await m2.answer("–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞!")

@dp.message_handler(lambda m: m.from_user.username == ADMIN_USERNAME and m.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª")
async def add_channel(msg: types.Message):
    await msg.answer("–í–≤–µ–¥–∏—Ç–µ @username –∫–∞–Ω–∞–ª–∞:")
    @dp.message_handler(lambda m: m.text.startswith("@"))
    async def add(m2: types.Message):
        data["channels"].append(m2.text)
        save_data(data)
        await m2.answer(f"‚úÖ –ö–∞–Ω–∞–ª {m2.text} –¥–æ–±–∞–≤–ª–µ–Ω.", reply_markup=admin_menu())

@dp.message_handler(lambda m: m.from_user.username == ADMIN_USERNAME and m.text == "‚ûñ –£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª")
async def del_channel(msg: types.Message):
    await msg.answer("–í–≤–µ–¥–∏—Ç–µ @username –∫–∞–Ω–∞–ª–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
    @dp.message_handler(lambda m: m.text.startswith("@"))
    async def delete(m2: types.Message):
        if m2.text in data["channels"]:
            data["channels"].remove(m2.text)
            save_data(data)
            await m2.answer(f"üóë –£–¥–∞–ª–µ–Ω {m2.text}", reply_markup=admin_menu())
        else:
            await m2.answer("–ù–µ –Ω–∞–π–¥–µ–Ω–æ!", reply_markup=admin_menu())

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)

